name: Build and Deploy code  #workflow name user defined

#it tells when the ci/cd pipeline should run or to trigger this code, if u want to run push use on:push, wanna run pull use on:pull-request
# wanna run both req then use under code 
on: [push,pull_request]

jobs:             #set of steps used to run
  build: 
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTE: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTE}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest   # specifying os 
    steps:
      - name: pulling git repo           
        uses: actions/checkout@v3           
      - name: Install python version 3.10
        uses: actions/setup-python@v4            
        with:
          python-version: "3.10"
      - name: update pip
        run: python -m pip install --upgrade pip               
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: |
          pip install pytest
          pytest
          
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME}}/pythonproject:latest 
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/pythonproject:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/pythonproject:buildcache,mode=max


  deploy:
    runs-on: ubuntu-latest
    needs: [build]               #the jobs will run parallel so here we mention first build should run then the deploy can run
    environment:
      name: production

    steps:         #to deploy the code in heroku we need to pul our github repo, then install heroku cli, heroku login , add git remote, git push heroku main
      - name: pulling git repo           
        uses: actions/checkout@v3   
      - name: deploying to heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}} 
          heroku_email: ${{secrets.HEROKU_EMAIL}}
      
        


  